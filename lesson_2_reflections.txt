What happens when you initialize a repository? Why do you need to do it?
It looks to me that when you initialize a reporsitory, any changes made to its files can be tracked by using git. 
If this is not done then it can't be managed using git, as far as I can see.

How is the staging area different from the working directory and the repository? What value do you think it offers?
The staging area contains informations about files that are intended to be committed to the repository during the
current commit. There may be files in the working directory that are not tracked in the staging area. It allows 
keeping commits more granular then committing everything in the working directory at the same time and also more 
logical because only changes that go together can be chosen to be committed together.

How can you use the staging area to make sure you have one commit per logical change?
The staging area allows changes between the working directory be compared with it and its changes be compared with
the repository. It also allows changes added to it be reverted if the user doesn't want them to be committed.
This gives the user a lot of flexibility as to which changes he/she wants to commit and which not. So the user can
use these features to only commit changes that belong with each other logically.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?
You could make a branch to work on a enhancing or adding a specific part of/to the project. You could be making changes
to head and to the branch at about the same time. But with branches,  the changes won't get mixed up and you'll know in 
which sequence a certain chronological sequence of changes were made.   
